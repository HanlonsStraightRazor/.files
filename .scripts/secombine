#!/usr/bin/awk -f
################################################################################
# Coalesce duplicate SELinux policy rules and output them in audit2why format.
################################################################################
# Catalog a policy line and remove duplicate (parts of) rules
$0 !~ /#|^$/ {
    i = $1 " " $2 " " $3
    if (i in line) {
        if ($4 ~ /^\{/) {
            for (j = 5; j < NF; j++) {
                if (!($j in line[i])) {
                    line[i][$j] = 1
                }
            }
        } else {
            sub(/;/, "", $4)
            if (!($4 in line[i])) {
                line[i][$4] = 1
            }
        }
    } else {
        if ($4 ~ /^\{/) {
            line[i][$5] = 1
            for (j = 6; j < NF; j++) {
                if (!($j in line[i])) {
                    line[i][$j] = 1
                }
            }
        } else {
            sub(/;/, "", $4)
            line[i][$4] = 1
        }
    }
}
# At the end, sort the policy entries within each group and output them,
# using the second field of the input as a section header
END {
    num_keys = asorti(line, sorted_keys)
    for (i = 1; i <= num_keys; i++) {
        key = sorted_keys[i]
        split(key, keys)
        if (keys[2] != save) {
            printf("\n#============= %s ==============\n", keys[2])
            save = keys[2]
        }
        printf("%s ", key)
        num_ops = asorti(line[key], sorted_ops)
        if (num_ops == 1) {
            printf("%s;\n", sorted_ops[1])
        } else {
            printf("{ ")
            for (j = 1; j <= num_ops; j++) {
                printf("%s ", sorted_ops[j])
            }
            printf("};\n")
        }
    }
}
